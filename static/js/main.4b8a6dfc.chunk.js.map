{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppHeader","styled","h1","ClearButton","props","className","id","onClick","handleClick","children","CalcInput","input","Calculator","state","value","waitingForOperand","operator","digit","this","setState","String","indexOf","console","log","charAt","substr","parseFloat","nextOp","nextVal","toggleSign","result","prev","next","inputDigit","doOperation","inputDot","inputPercent","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b8a6dfc.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppHeader>Muhammad&apos;s Javascript Calculator</AppHeader>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst AppHeader = styled.h1`\r\n  display: block;\r\n  width: 100vh;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: palevioletred;\r\n`;\r\n\r\nconst ClearButton = props => <div className=\"CalcButton operator\" id={props.id} onClick={props.handleClick}>{props.children}</div>\r\n\r\nconst CalcInput = props => {\r\n  return (\r\n        <div className=\"CalcInput\" id={props.id}>{props.input}</div>\r\n  );\r\n}\r\n\r\nclass Calculator extends React.Component {\r\n  state = {\r\n    value: null,\r\n    input: '0',\r\n    waitingForOperand: false,\r\n    operator: null\r\n  }\r\n\r\n  inputDigit(digit) {\r\n    const { input, operator, waitingForOperand } = this.state;\r\n\r\n    if(waitingForOperand && operator){\r\n      if(input === '-') {\r\n        this.setState({\r\n          input: String(\"-\" + digit),\r\n          waitingForOperand: false\r\n        });\r\n      } else {\r\n        this.setState({\r\n          input: String(digit),\r\n          waitingForOperand: false\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        input: input === '0' ? String(digit) : input + digit\r\n      });\r\n    } \r\n  }\r\n\r\n  inputDot() {\r\n    const { input, waitingForOperand } = this.state;\r\n\r\n    if(waitingForOperand) {\r\n      this.setState({\r\n        input: '0.',\r\n        waitingForOperand: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        input: input.indexOf('.') === -1 ? input + '.' : input,\r\n        waitingForOperand: false\r\n      });\r\n    }  \r\n  }\r\n\r\n  toggleSign() {\r\n    const { input, waitingForOperand } = this.state;\r\n\r\n    if(waitingForOperand) {\r\n      this.setState({\r\n        input: input === '-' ? \"0\" : \"-\",\r\n      });\r\n      console.log(waitingForOperand);\r\n    } else {\r\n      this.setState({\r\n        input: input.charAt(0) === '-' ? input.substr(1) : '-' + input,\r\n      });\r\n    }\r\n  }\r\n\r\n  inputPercent() {\r\n    const { input } = this.state;\r\n    const value = parseFloat(input);\r\n\r\n    this.setState({\r\n      input: String(value/100)\r\n    });\r\n  }\r\n\r\n  doOperation(nextOp) {\r\n    const { input, operator, waitingForOperand, value } = this.state;\r\n\r\n    const operations = {\r\n      '/': (prev, next) => prev / next,\r\n      '*': (prev, next) => prev * next,\r\n      '+': (prev, next) => prev + next,\r\n      '-': (prev, next) => prev - next,\r\n      '=': (prev, next) => next,\r\n    }\r\n\r\n    let nextVal = parseFloat(input);\r\n\r\n    if (operator && waitingForOperand && nextOp === '-') {\r\n      this.toggleSign();\r\n      this.setState({\r\n        waitingForOperand: false,\r\n        operator: operator\r\n      });\r\n    }\r\n      \r\n    else if (value === null) {\r\n      this.setState({\r\n        value: nextVal,\r\n        waitingForOperand: true,\r\n        operator: nextOp\r\n      });\r\n    }\r\n    else if(operator) {\r\n      const currentVal = value || 0;\r\n      const result = operations[operator](currentVal, nextVal);\r\n\r\n\r\n      this.setState({\r\n        value: result,\r\n        input: String(result),\r\n        waitingForOperand: true,\r\n        operator: nextOp\r\n      });\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"CalcWrapper\">\r\n        {/* <pre>{JSON.stringify(this.state, null, 2)}</pre> */}\r\n        <CalcInput id=\"display\" input={this.state.input}></CalcInput>\r\n        \r\n        <div className=\"CalcRow\">\r\n          <button className=\"CalcButton\" id=\"seven\" onClick={() => this.inputDigit(7)}>7</button>\r\n          <button className=\"CalcButton\" id=\"eight\" onClick={() => this.inputDigit(8)}>8</button>\r\n          <button className=\"CalcButton\" id=\"nine\" onClick={() => this.inputDigit(9)}>9</button>\r\n          <button className=\"CalcButton operator\" id=\"divide\" onClick={() => this.doOperation('/')}>/</button>\r\n        </div>\r\n        <div className=\"CalcRow\">\r\n          <button className=\"CalcButton\" id=\"four\" onClick={() => this.inputDigit(4)}>4</button>\r\n          <button className=\"CalcButton\" id=\"five\" onClick={() => this.inputDigit(5)}>5</button>\r\n          <button className=\"CalcButton\" id=\"six\" onClick={() => this.inputDigit(6)}>6</button>\r\n          <button className=\"CalcButton operator\" id=\"multiply\" onClick={() => this.doOperation('*')}>x</button>\r\n        </div>\r\n        <div className=\"CalcRow\">\r\n          <button className=\"CalcButton\" id=\"one\" onClick={() => this.inputDigit(1)}>1</button>\r\n          <button className=\"CalcButton\" id=\"two\" onClick={() => this.inputDigit(2)}>2</button>\r\n          <button className=\"CalcButton\" id=\"three\" onClick={() => this.inputDigit(3)}>3</button>\r\n          <button className=\"CalcButton operator\" id=\"add\" onClick={() => this.doOperation('+')}>+</button>\r\n        </div>\r\n        <div className=\"CalcRow\">\r\n          <button className=\"CalcButton\" id=\"decimal\" onClick={() => this.inputDot()}>.</button>\r\n          <button className=\"CalcButton\" id=\"zero\" onClick={() => this.inputDigit(0)}>0</button>\r\n          <button className=\"CalcButton\" id=\"equals\" onClick={() => this.doOperation('=')}>=</button>\r\n          <button className=\"CalcButton operator\" id=\"subtract\" onClick={() => this.doOperation('-')}>-</button>\r\n        </div>\r\n        <div className=\"CalcRow\">\r\n          <ClearButton id=\"clear\" handleClick={() => this.setState({ input: '0'})}>AC</ClearButton>\r\n          <button className=\"CalcButton operator\" id=\"precent\" onClick={() => this.inputPercent()}>%</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}