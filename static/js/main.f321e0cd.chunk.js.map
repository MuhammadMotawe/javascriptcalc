{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppHeader","styled","h1","ClearButton","props","className","id","onClick","handleClick","children","CalcInput","input","Calculator","state","value","waitingForOperand","operator","digit","this","setState","String","indexOf","console","log","charAt","substr","parseFloat","nextOp","nextVal","toggleSign","result","prev","next","inputDigit","doOperation","inputDot","inputPercent","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f321e0cd.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader>Muhammad&apos;s Javascript Calculator</AppHeader>\n      <Calculator />\n    </div>\n  );\n}\n\nconst AppHeader = styled.h1`\n  display: block;\n  width: 100vh;\n  font-size: 28px;\n  font-weight: bold;\n  color: palevioletred;\n`;\n\nconst ClearButton = props => <div className=\"CalcButton operator\" id={props.id} onClick={props.handleClick}>{props.children}</div>\n\nconst CalcInput = props => {\n  return (\n        <div className=\"CalcInput\" id={props.id}>{props.input}</div>\n  );\n}\n\nclass Calculator extends React.Component {\n  state = {\n    value: null,\n    input: '0',\n    waitingForOperand: false,\n    operator: null\n  }\n\n  inputDigit(digit) {\n    const { input, operator, waitingForOperand } = this.state;\n\n    if(waitingForOperand && operator){\n      if(input === '-') {\n        this.setState({\n          input: String(\"-\" + digit),\n          waitingForOperand: false\n        });\n      } else {\n        this.setState({\n          input: String(digit),\n          waitingForOperand: false\n        });\n      }\n    } else {\n      this.setState({\n        input: input === '0' ? String(digit) : input + digit\n      });\n    } \n  }\n\n  inputDot() {\n    const { input, waitingForOperand } = this.state;\n\n    if(waitingForOperand) {\n      this.setState({\n        input: '0.',\n        waitingForOperand: false\n      });\n    } else {\n      this.setState({\n        input: input.indexOf('.') === -1 ? input + '.' : input,\n        waitingForOperand: false\n      });\n    }  \n  }\n\n  toggleSign() {\n    const { input, waitingForOperand } = this.state;\n\n    if(waitingForOperand) {\n      this.setState({\n        input: input === '-' ? \"0\" : \"-\",\n      });\n      console.log(waitingForOperand);\n    } else {\n      this.setState({\n        input: input.charAt(0) === '-' ? input.substr(1) : '-' + input,\n      });\n    }\n  }\n\n  inputPercent() {\n    const { input } = this.state;\n    const value = parseFloat(input);\n\n    this.setState({\n      input: String(value/100)\n    });\n  }\n\n  doOperation(nextOp) {\n    const { input, operator, waitingForOperand, value } = this.state;\n\n    const operations = {\n      '/': (prev, next) => prev / next,\n      '*': (prev, next) => prev * next,\n      '+': (prev, next) => prev + next,\n      '-': (prev, next) => prev - next,\n      '=': (prev, next) => next,\n    }\n\n    let nextVal = parseFloat(input);\n\n    if (operator && waitingForOperand && nextOp === '-') {\n      this.toggleSign();\n      this.setState({\n        waitingForOperand: false,\n        operator: operator\n      });\n    }\n      \n    else if (value === null) {\n      this.setState({\n        value: nextVal,\n        waitingForOperand: true,\n        operator: nextOp\n      });\n    }\n    else if(operator) {\n      const currentVal = value || 0;\n      const result = operations[operator](currentVal, nextVal);\n\n\n      this.setState({\n        value: result,\n        input: String(result),\n        waitingForOperand: true,\n        operator: nextOp\n      });\n    }\n\n    \n  }\n\n  render() {\n    return(\n      <div className=\"CalcWrapper\">\n        {/* <pre>{JSON.stringify(this.state, null, 2)}</pre> */}\n        <CalcInput id=\"display\" input={this.state.input}></CalcInput>\n        \n        <div className=\"CalcRow\">\n          <button className=\"CalcButton\" id=\"seven\" onClick={() => this.inputDigit(7)}>7</button>\n          <button className=\"CalcButton\" id=\"eight\" onClick={() => this.inputDigit(8)}>8</button>\n          <button className=\"CalcButton\" id=\"nine\" onClick={() => this.inputDigit(9)}>9</button>\n          <button className=\"CalcButton operator\" id=\"divide\" onClick={() => this.doOperation('/')}>/</button>\n        </div>\n        <div className=\"CalcRow\">\n          <button className=\"CalcButton\" id=\"four\" onClick={() => this.inputDigit(4)}>4</button>\n          <button className=\"CalcButton\" id=\"five\" onClick={() => this.inputDigit(5)}>5</button>\n          <button className=\"CalcButton\" id=\"six\" onClick={() => this.inputDigit(6)}>6</button>\n          <button className=\"CalcButton operator\" id=\"multiply\" onClick={() => this.doOperation('*')}>x</button>\n        </div>\n        <div className=\"CalcRow\">\n          <button className=\"CalcButton\" id=\"one\" onClick={() => this.inputDigit(1)}>1</button>\n          <button className=\"CalcButton\" id=\"two\" onClick={() => this.inputDigit(2)}>2</button>\n          <button className=\"CalcButton\" id=\"three\" onClick={() => this.inputDigit(3)}>3</button>\n          <button className=\"CalcButton operator\" id=\"add\" onClick={() => this.doOperation('+')}>+</button>\n        </div>\n        <div className=\"CalcRow\">\n          <button className=\"CalcButton\" id=\"decimal\" onClick={() => this.inputDot()}>.</button>\n          <button className=\"CalcButton\" id=\"zero\" onClick={() => this.inputDigit(0)}>0</button>\n          <button className=\"CalcButton\" id=\"equals\" onClick={() => this.doOperation('=')}>=</button>\n          <button className=\"CalcButton operator\" id=\"subtract\" onClick={() => this.doOperation('-')}>-</button>\n        </div>\n        <div className=\"CalcRow\">\n          <ClearButton id=\"clear\" handleClick={() => this.setState({ input: '0'})}>AC</ClearButton>\n          <button className=\"CalcButton operator\" id=\"precent\" onClick={() => this.inputPercent()}>%</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}